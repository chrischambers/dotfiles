extends javascript-jasmine

snippet def "function"  b!
let ${1:name} = function ($2) {
	"use strict";
	$3
};
endsnippet

snippet iife "Instantly Invoked Function Expression (IIFE)"  b
;(function () {
	'use strict'
	$0
}())
endsnippet

# ----------------------------------------------------------------------------
# require.js
# ----------------------------------------------------------------------------

# sugared-define:
# define(function (require) {
#	 var dependency1 = require('dependency1'),
#		 dependency2 = require('dependency2');
#
#	 return function () {
#		...
#	 };
# });

# snippet require "require.js require"  b!
# require(["${1:filename}"], function (${1/["']//g}) {
#   $0
# }
# endsnippet

# ----------------------------------------------------------------------------
# Conditionals:
# ----------------------------------------------------------------------------
snippet if "If statement"  b
if (${1:conditional}) {
	$2
}
endsnippet

snippet elif "Else-if"  w
else if (${1:conditional}) {
	$2
}
endsnippet

snippet else "Else"  w
else {
	$1
}
endsnippet

snippet switch "Switch statement"  b!
switch(${1:expression}) {
	case ${2:n}:
		$3
		break;
	${4:default:
		${5:// finally}}
}
endsnippet
# ----------------------------------------------------------------------------
# Loops:
# ----------------------------------------------------------------------------
snippet for "Classic for loop"  b
let i, length = ${1:array.length}
for (i=0; i < length; i++) {
	${2:${VISUAL}}
}
endsnippet

snippet for "For item of iterable"  b
for (let ${1:item} of ${2:iterable}) {
	${3:${VISUAL}}
}
endsnippet

snippet for "For item in object"  b
for (${1:item} in ${2:obj}) {
	if (obj.hasOwnProperty(item)) {
		${3:VISUAL}
	}
}
endsnippet

snippet iterable "Make your own objects iterable"  b
${1:myObject}.prototype[Symbol.iterator] = Array.prototype[Symbol.iteartor]
endsnippet

# ----------------------------------------------------------------------------
# Console Manipulation:
# ----------------------------------------------------------------------------
snippet clog "Console.log" i
console.log($1)
endsnippet

snippet "cerro?r?" "Console.error" ri
console.error($1)
endsnippet

# ----------------------------------------------------------------------------
# ECMAScript 2015 Goodies:
# ----------------------------------------------------------------------------

global !p
def has_multiple_args(string):
    return len(string.replace(",", " ").split()) > 1

def parenthesised_already(string):
	return not (string == string.strip("()"))

def paren():
	if has_multiple_args(t[1]) and not parenthesised_already(t[1]):
		t[1] = "(%s" % t[1]
		snip.rv = ")"

def already_braced():
	cb = snip.buffer
	row = snip.snippet_start[0]
	line = cb[row]
	return line.endswith("{")

def open_brace():
	if already_braced():
		return
	snip.shift(1)
	m = snip.mkline
	if "\n" in t[2]:
		t[2] = "{\n" + m(t[2]) + m()
		snip.rv = "\n" + m("return ")
	pass

def close_brace():
	# snip.rv = already_braced()
	if not already_braced():
		return
	if "\n" in t[2]:
		snip.unshift(1)
		snip.rv = "\n" + snip.mkline("}")
endglobal

snippet f "Function" w
${1:arg}`!p paren()` => $2`!p open_brace()`$3`!p close_brace()`
endsnippet

snippet l "let"  w
let ${1:variable} = ${2:${VISUAL:value}}
endsnippet

# Match only if there are is a backtick on the current line:
# For use with template literals.
snippet s "String Interpolation" "re.match('^.*`', snip.buffer[snip.line])" we
${${1:expression}}
endsnippet

snippet "err?o?r" "throw Error" r
throw new Error("${1:error message}")
endsnippet

# ----------------------------------------------------------------------------
# Promises:
# ----------------------------------------------------------------------------

snippet promise "Create a new Promise object"  b
let ${1:promise} = new Promise((resolve, reject) => {
	$2
})
endsnippet

# ----------------------------------------------------------------------------
# jQuery:
# ----------------------------------------------------------------------------

snippet j "jQuery" w
$("$1")$0
endsnippet

snippet domready "jQuery DOMready"  b
jQuery(function () {
	$0
})
endsnippet

# add ajax snippet here

# vim: ft=snippets :
