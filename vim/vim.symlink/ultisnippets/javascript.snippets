extends javascript-jasmine
extends javascript-react
extends javascript-ember

snippet def "function"  b!
let ${1:name} = function ($2) {
	"use strict";
	$3
};
endsnippet

snippet iife "Instantly Invoked Function Expression (IIFE)"  b
(function () {
	'use strict'
	$0
}())
endsnippet

snippet "^(\s+)(return|retur|retu|ret|re|r)" "return statement"  r
`!p snip.rv = match.group(1)`return $0
endsnippet

# ----------------------------------------------------------------------------
# require.js
# ----------------------------------------------------------------------------

# sugared-define:
# define(function (require) {
#	 var dependency1 = require('dependency1'),
#		 dependency2 = require('dependency2');
#
#	 return function () {
#		...
#	 };
# });

# snippet require "require.js require"  b!
# require(["${1:filename}"], function (${1/["']//g}) {
#   $0
# }
# endsnippet

# ----------------------------------------------------------------------------
# Conditionals:
# ----------------------------------------------------------------------------
snippet if "If statement"  b
if (${1:conditional}) {
	$2
}
endsnippet

snippet elif "Else-if"  w
else if (${1:conditional}) {
	$2
}
endsnippet

snippet else "Else"  w
else {
	$1
}
endsnippet

snippet switch "Switch statement"  b!
switch(${1:expression}) {
	case ${2:n}:
		$3
		break;
	${4:default:
		${5:// finally}}
}
endsnippet
# ----------------------------------------------------------------------------
# Loops:
# ----------------------------------------------------------------------------
snippet for "Classic for loop"  b
let i, length = ${1:array.length}
for (i=0; i < length; i++) {
	${2:${VISUAL}}
}
endsnippet

snippet for "For item of iterable"  b
for (let ${1:item} of ${2:iterable}) {
	${3:${VISUAL}}
}
endsnippet

snippet for "For key in object"  b
for (${1:key} in ${2:obj}) {
	if ($2.hasOwnProperty($1)) {
		${3:${VISUAL}}
	}
}
endsnippet

snippet iterable "Make your own objects iterable"  b
${1:myObject}.prototype[Symbol.iterator] = Array.prototype[Symbol.iteartor]
endsnippet

# ----------------------------------------------------------------------------
# Console Manipulation:
# ----------------------------------------------------------------------------
snippet clog "Console.log" i
console.log($1) // eslint-disable-line no-console
endsnippet

snippet "cerr?o?r?" "Console.error" ri
console.error($1) // eslint-disable-line no-console
endsnippet

# ----------------------------------------------------------------------------
# ECMAScript 2015 Goodies:
# ----------------------------------------------------------------------------

global !p
def has_multiple_args(string):
    return len(string.replace(",", " ").split()) > 1

def parenthesised_already(string):
	return not (string == string.strip("()"))

def paren():
	if has_multiple_args(t[1]) and not parenthesised_already(t[1]):
		t[1] = "(%s" % t[1]
		snip.rv = ")"

def already_braced():
	cb = snip.buffer
	row = snip.snippet_start[0]
	line = cb[row]
	return line.endswith("{")

def open_brace():
	if t[2] and "\n" in t[2][0]:
		snip.rv = "{"
	pass

def add_return_statement():
	if t[2] and "\n" in t[2][0]:
		snip.shift(1)
		snip.rv = "\n" + snip.mkline("return ")

def close_brace():
	if t[2] and "\n" in t[2][0]:
		snip.unshift(1)
		snip.rv = "\n" + snip.mkline("}")
endglobal

snippet f "Function" w
${1:arg}`!p paren()` => `!p open_brace()`$2`!p add_return_statement()`$3`!p close_brace()`
endsnippet

snippet "\ble?t?" "let"  r
let ${1:variable} = $0
endsnippet

snippet "\bco?n?s?t?" "const"  r
const ${1:variable} = $0
endsnippet

# Match only if there are is a backtick on the current line:
# For use with template literals.
snippet s "String Interpolation" "re.match('^.*`', snip.buffer[snip.line])" we
${${1:expression}}
endsnippet

snippet "\ber?r?o?r" "throw Error" r
throw new Error("${1:error message}")
endsnippet

snippet class "" b
class ${1:Foo}${2: extends ${3:Something}} {
	${4:constructor(${5:...args}) {
		super($5)$6
	}}
	${0:${VISUAL}}
}
endsnippet

snippet "\bmet?h?o?d?" "class method" r
${1:name} ($2) {
	${0:${VISUAL}}
}
endsnippet

snippet "^(import|impor|impo|imp|im|i)" "import statement" r
import { $1 } from '$2'
endsnippet

# ----------------------------------------------------------------------------
# Promises:
# ----------------------------------------------------------------------------

snippet promise "Create a new Promise object"  b
let ${1:promise} = new Promise((resolve, reject) => {
	$2
})
endsnippet

# ----------------------------------------------------------------------------
# jQuery:
# ----------------------------------------------------------------------------

snippet j "jQuery" w
$("$1")$0
endsnippet

snippet domready "jQuery DOMready"  b
jQuery(function () {
	$0
})
endsnippet

# add ajax snippet here

# Promises:
snippet .t "Then"  b
.then($0)
endsnippet

snippet .c "Catch"  b
.catch(error => {
	${1:console.error(error)}
})
endsnippet

# vim: ft=snippets :
