# Shebang:
snippet #! "Shebang" b!
#!/usr/bin/env python
# -*- coding: UTF-8 -*-
$0
endsnippet

snippet sb "Plain" b!
#!/usr/bin/env python
# -*- coding: ${1:UTF-8} -*-
$0
endsnippet

snippet sb "Unicode" b
#!/usr/bin/env python
# -*- coding: UTF-8 -*-
$0
endsnippet

snippet sb "Latin-1" b
#!/usr/bin/env python
# -*- coding: Latin-1 -*-
$0
endsnippet

# ====================
# Imports:
snippet i b
import ${1:module}
$0
endsnippet

snippet from "From foo import bar" b!
from ${1:package/module} import ${2:module/function/class}
$0
endsnippet

# ====================
# Module Docstring
snippet docs "Documentation String for Module" b
'''
File: ${1:`!p res=fn`}
Author: ${2:`!v g:snips_author`}
Description: ${3}
'''
$0
endsnippet


# ====================
# Loops
snippet wh "While..." b
while ${1:condition}:
    ${2:# code...}
$0
endsnippet

snippet for "For ..." b
for ${1:needle} in ${2:haystack}:
    ${3:# code...}
$0
endsnippet

# ====================
# New Function
snippet def "Function Definition" b
def ${1:fname}(${2:`!v indent('.') ? 'self' : ''`}):
    ${3:pass}
$0
endsnippet

snippet cla "smart class" b
class ${1:MyClass}(${2:object}):
${3:    """${4:Docstring for $1}"""
}
    def __init__(self${5/([^,])?(.*)/(?1:, )/}${5:arg}):
${2/object$|(.+)/(?1:        super\($1, self\).__init__\(\)\n\n)/}${5/(\A\s*,\s*\Z)|,?\s*([A-Za-z_][A-Za-z0-9_]*)\s*(=[^,]*)?(,\s*|$)/(?2:        self.$2 = $2\n)/g}
endsnippet
# ${2/object$|(.+)/(?1:        $0.__init__\(self\)\n\n)/}${5/(\A\s*,\s*\Z)|,?\s*([A-Za-z_][A-Za-z0-9_]*)\s*(=[^,]*)?(,\s*|$)/(?2:        self.$2 = $2\n)/g}
# super\($0, self).__init__\(\)\n\n

# New Method
snippet meth "Method Definition" b
def ${1:mname}(self${2:, ${3:args}}):
    ${4:pass}
$0
endsnippet

snippet classmethod "ClassMethod Definition" b
@classmethod
def ${1:mname}(cls${2:, ${3:args}}):
    ${4:pass}
$0
endsnippet

snippet staticmethod "StaticMethod Definition" b
@staticmethod
def ${1:mname}(${2:args}):
    ${3:pass}
$0
endsnippet

# New Property
snippet property "Property" b
def ${1:foo}():
    doc = "${2:The $1 property.}"
    def fget(self):
        ${3:return self._$1}
    def fset(self, value):
        ${4:self._$1 = value}
$0
endsnippet

# Lambda
snippet ld
${1:var} = lambda ${2:vars} : ${3:action}
endsnippet

#Super
snippet super "Super" b
$4super(${1:ClassName}, self).${2:__init__}(${3:args_or_kwargs})
$0
endsnippet

snippet . "self" b
self.
endsnippet

snippet .s "self" i
self.
endsnippet

snippet (s "self" i
(self${1:, $2}):
    $0
endsnippet

snippet u "Unicode" b
def __unicode__(self):
    return u"$1"${2: % (${3:args},)}
$0
endsnippet
# ====================
snippet try "Try/Except" b!
try:
    ${1:pass}
except ${2:Exception}, ${3:e}:
    ${4:raise $3}
$0
endsnippet

snippet try "Try/Except/Else" b
try:
    ${1:pass}
except ${2:Exception}, ${3:e}:
    ${4:raise $3}
else:
    ${5:pass}
$0
endsnippet

snippet try "Try/Except/Finally" b
try:
    ${1:pass}
except ${2:Exception}, ${3:e}:
    ${4:raise $3}
finally:
    ${5:pass}
$0
endsnippet

snippet try "Try/Except/Else/Finally" b
try:
    ${1:pass}
except${2: ${3:Exception}, ${4:e}}:
    ${5:raise}
else:
    ${6:pass}
finally:
    ${7:pass}
$0
endsnippet
# ====================

# if __name__ == '__main__':
snippet ifmain "If name == main" b!
$0
if __name__ == '__main__':
    main()
endsnippet

# __magic__
snippet _
__${1:init}__${2}
endsnippet

# ----------------
# Optparse:
# ----------------
snippet optparse "Optparse Stub" b
from optparse import OptionParser

def main():
    required_args = [${1:"SOURCE", "DESTINATION"}]
    usage = "usage: %s [options] %s" % ("%prog", "".join(required_args),)
    parser = OptionParser(usage)

    parser.add_option("-f", "--file", 
        dest="filename",
        metavar="FILE",
        help="read data from FILE"
    )
    parser.add_option("-v", "--verbose",
        action="store_true", 
        dest="verbose", 
        default=True,
        help="Output logging at DEBUG and above [default: %default]"
    )
    parser.add_option("-q", "--quiet",
        action="store_false", 
        dest="verbose",
        help="Output logging at WARNING and above"
    )
    
    options, args = parser.parse_args()
    if len(args) != len(required_args):
        parser.error("%s arguments are required (%s), you specified %s" % (
            len(required_args), " ".join(required_args), len(args),
        ))
    if options.verbose:
        log.setLevel(logging.DEBUG)
    else:
        log.setLevel(logging.WARNING)
$0
endsnippet

snippet opt "Optparse option" b
parser.add_option("-${1:o}", "--${2:option-longhand}",
    ${3:action="${4:store}", 
    }dest="${5:}"
)
$0
endsnippet

# ----------------
# Debugging:
# ----------------
snippet ipdb "ipdb" b
import ipdb
ipdb.set_trace()
$0
endsnippet

snippet traceback "Traceback stub" b
import sys, traceback

exc_type, exc_value, tb = sys.exc_info()
error_output = "Type: <%s>\n%s\n\nTraceback:\n%s" % (
    exc_type.__name__, exc_value, "\n".join(traceback.format_tb(tb))
)
endsnippet

# ----------------
# Testing:
# ----------------
snippet testcase "TestCase stub" b
class Test${1:Object}(${2:unittest.TestCase}):

    def setUp(self):
        ${3:pass}

    def tearDown(self):
        ${4:pass}
    $0
endsnippet

            
snippet ase "AssertEqual" b
self.assertEqual(${1:expected}, ${2:actual})
$0
endsnippet

snippet as_ "Assert" b
self.assert_(${1:expression})
$0
endsnippet

snippet asne "AssertNotEqual" b
self.assertNotEqual(${1:first}, ${2:second})
$0
endsnippet

snippet asr "AssertRaises" b
self.assertRaises(${1:Exception}, ${2:callable}, ${3:args_or_kwargs})
$0
endsnippet

snippet asnr "AssertNotRaises" b
try:
    ${1:#operation}
except ${2:ValueError}, e:
    self.fail("${3:failure message}")
$0
endsnippet

snippet ast "AssertTrue" b
self.assertTrue(${1:expression})
$0
endsnippet

snippet asf "AssertFalse" b
self.assertFalse(${1:expression})
$0
endsnippet

snippet asred "AssertRedirects" b
self.assertRedirects(${1:response}, reverse('${2:expected_url}'${3:, args=(${4:},), kwargs={${5:}}}), ${6:status_code=302, target_status_code=200})
$0
endsnippet

snippet asfe "AssertFormError" b
self.assertFormError(${1:response}, '${2:form_name}', ${3:field}, ${4:error_string_or_list})
$0
endsnippet

snippet asc "AssertContains" b
self.assertContains(${1:response}, ${2:text}${3:, count=${4:None}, status_code=200})
$0
endsnippet

snippet asnc "AssertNotContains" b
self.assertNotContains(${1:response}, ${2:text}, ${3:status_code=200})
$0
endsnippet

snippet astu "AssertTemplateUsed" b
self.assertTemplateUsed(${1:response}, '${2:template}.html')
$0
endsnippet

snippet astnu "AssertTemplateNotUsed" b
self.assertTemplateNotUsed(${1:response}, '${2:template}.html')
$0
endsnippet

# ----------------
# Django:
# ----------------
# -------
# Imports:
# -------
snippet modelimports "Django Model Imports stub" b
from django.db import models
from datetime import datetime
$0
endsnippet

snippet formimports "Django Form Imports stub" b
from django import forms
$0
endsnippet

snippet urlimports "Django URL Imports stub" b
from django.conf.urls.defaults import *
$0
endsnippet

snippet adminimports "Django Admin Imports stub" b
from django.contrib import admin
$0
endsnippet

snippet viewimports
from django.contrib.auth.decorators import login_required, permission_required
from django.core.urlresolvers import reverse
from django.http import Http404, HttpResponseRedirect, HttpResponseForbidden
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
${1}
endsnippet

# -------
# Orm:
# -------

snippet oget "get object" b
${1:var} = ${2:Model}.${3:objects}.get(${4:id}=${5:value})
$0
endsnippet

snippet oget "get object (variable specified)" w
${1:Model}.${2:objects}.get(${3:id}=${4:value})
$0
endsnippet

snippet ogettry "get object or None" b
try:
    ${1:var} = ${2:Model}.${3:objects}.get(${4:id}=${5:value})
except $2.DoesNotExist, e:
    $1 = ${6:None}
$0
endsnippet

snippet ofilter "filter objects" b
${1:var} = ${2:Model}.${3:objects}.filter(${4:id}=${5:value})
$0
endsnippet

# -------
# Models:
# -------
snippet djmod
class ${1:ModelName}(models.Model):
    ${2:# fields}
    datetime_created = models.DateTimeField(editable=False)
    datetime_modifed = models.DateTimeField(editable=False)

    class Meta(object):
        ordering = ['-datetime_created']
        get_latest_by = 'datetime_created'

    def __unicode__(self):
        return u"${2:"unicode string"}" % (${3:subs},)

    def save(self, force_insert=False, force_update=False):
        now = datetime.now()
        if not self.id:
            self.datetime_created = now
        self.datetime_modified = now
        $1 = super($1, self).save(force_insert, force_update) 
        $1.save_m2m() # only if commit=False
        return $1

    @models.permalink
    def get_absolute_url(self):
        return ('${4:url_name}', ${5:(args,), {kwargs}})
    $0
endsnippet

snippet mchar
${1:fieldname} = models.CharField('$1', blank=True, max_length=${2:255})
$0
endsnippet

snippet mtext
${1:fieldname} = models.TextField('$1', blank=True, max_length=${2:255})
$0
endsnippet

snippet mslug
${1:fieldname} = models.SlugField('$1', blank=True, max_length=${2:50})
$0
endsnippet

snippet mcsi
${1:fieldname} = models.CommaSeparatedIntegerField('${2}', max_length=${3:255})
$0
endsnippet

snippet memail
${1:fieldname} = models.EmailField('$1', blank=True)
$0
endsnippet

snippet murl
${1:fieldname} = models.UrlField('$1', blank=True, verify_exists=${2:True})
$0
endsnippet

snippet mxml
${1:fieldname} = models.XMLField('$1', blank=True, schema_path=${2:None})
$0
endsnippet

snippet mint
${1:fieldname} = models.IntegerField('$1', null=True, blank=True)
$0
endsnippet

snippet mintsmall
${1:fieldname} = models.SmallIntegerField('$1', null=True, blank=True)
$0
endsnippet

snippet mintpos
${1:fieldname} = models.PositiveIntegerField('$1', null=True, blank=True)
$0
endsnippet

snippet mintpossmall
${1:fieldname} = models.PositiveSmallIntegerField('$1', null=True, blank=True)
$0
endsnippet

snippet mfloat
${1:fieldname} = models.FloatField('$1', null=True, blank=True, decimal_places=${2})
$0
endsnippet

snippet mdec
${1:fieldname} = models.DecimalField('$1', blank=True, null=True, 
    max_digits=${2:None}, 
    decimal_places=${3:2}
)
$0
endsnippet

snippet mip
${1:fieldname} = models.IPAddressField('$1', null=True, blank=True)
$0
endsnippet

snippet mfk
${1:fieldname} = models.ForeignKey('${2:App.RelatedModel}',
    ${3:null=True, blank=True, }${4:verbose_name='$1', related_name='$2${3}'}
)
$0
endsnippet

snippet m2m
${1:fieldname} = models.ManyToManyField('${2:App.RelatedModel}',
    null=True, verbose_name='$1', related_name='${3}'
)
$0
endsnippet

snippet o2o
${1:fieldname} = models.OneToOneField('${2:App.RelatedModel}',
    null=True, verbose_name='$1', related_name='${3}'
)
$0
endsnippet

snippet mbool
${1:fieldname} = models.BooleanField('${2}')
endsnippet

snippet mboolnull
${1:fieldname} = models.NullBooleanField('${2}')
endsnippet

snippet mfield
${1:fieldname} = models.${2:FieldType}Field('${3:verbose_name}', ${4:other_params})
endsnippet


snippet mff
${1:fieldname} = models.FileField('$1', upload_to=None)
${2}
endsnippet

snippet mif
${1:fieldname} = models.ImageField('$1', upload_to=None, height_field=None, width_field=None, max_length=100)
${2}
endsnippet

snippet mfpf
${1:fieldname} = models.FilePathField('$1', 
    path=${2:unix_style_path}, 
    match=r'${3:regex_for_basename}', 
    recursive=${4:False}
)
${5}
endsnippet

snippet mdate
${1:fieldname} = models.DateField('$1')
${2}
endsnippet

snippet mdt
${1:fieldname} = models.DateTimeField('$1')
${2}
endsnippet

snippet mtime
${1:fieldname} = models.TimeField('$1')
${2}
endsnippet

# Iabbr addmodel class <>(meta.Model):<CR><><CR><CR>def __repr__(self):<CR>return "%s" % (<>)<CR><CR>class META:<CR>admin = meta.Admin()
# Iabbr mif meta.ImageField(upload_to='<>')<CR><>
# Iabbr mff meta.FileField(upload_to='<>')<CR><>

# Snippet ffld models.FileField(upload_to=<{}>)<CR><{}>
# Snippet fpfld models.FilePathField(path=<{}>, match="<{""}>", recursive=<{False}>)<CR><{}>
# Snippet floatfld models.FloatField(max_digits=<{}>, decimal_places=<{}>)<CR><{}>
snippet choices
${1:type_of}_CHOICES = (
    (${2:database_entry}, u'${3:human_readable_name}'),
    ${4:}
)
$0
endsnippet

snippet modelsave
def save(self, force_insert=False, force_update=False):
    # ${1:do_something}
    ${1:obj} = super(${2:ClassName}, self).save(force_insert, force_update) 
    return $1
$0
endsnippet


# -------
# Admin:
# -------
snippet adminstub
from django.contrib import admin

class ${1:ClassName}Admin(admin.ModelAdmin):
    pass

admin.site.register($1, $1Admin)
$0
endsnippet

snippet admin
class ${1:ClassName}Admin(admin.ModelAdmin):
    pass

admin.site.register($1, $1Admin)
$0
endsnippet

snippet adminaction
def ${1:make_action_happen}(modeladmin, request, queryset):
    for ${2:obj} in queryset:
        ${3:# do something}
$1.short_description = "${4:$1}"
${5:}
endsnippet

# -------
# Forms:
# -------
snippet form "Django Form Stub" b
class ${1:My}Form(forms.Form):
    $0
endsnippet

snippet modelform "Django ModelForm Stub" b
class ${1:My}Form(forms.ModelForm):

    def __init__(self, *args, **kwargs):
        super($1, self).__init__(*args, **kwargs)
        self.fields['${2:fieldname}'].required = True

    class Meta(object):
        model = ${3:model}
        $0
endsnippet

snippet clean "Django Form Clean" b
def clean(self):
    if ( "${1:fieldname 1}" in self.cleaned_data and
         "${2:fieldname 2}" in self.cleaned_data ):
        if self.cleaned_data["$1"] != self.cleaned_data["$2"]:
            raise forms.ValidationError("${3:Error Message}")
    return self.cleaned_data
endsnippet

snippet cleanf "Django Form Clean Fieldname" b
def clean_${1:fieldname}(self):
    $1 = self.cleaned_data['$1']
    $2
    return $1
    $0
endsnippet

snippet formsave "Django Form Custom Save" b
def save(self, commit=False, *args, **kwargs):
    # ${1:do_something}
    ${2:obj} = super(${3:ClassName}, self).save(commit, *args, **kwargs) 
    # ${4:modify $2}
    return $2
    $0
endsnippet

snippet fbool "forms.BooleanField" b
${1:fieldname} = forms.BooleanField(${2:})
$0
endsnippet

snippet fnbool "forms.NullBooleanField" b
${1:fieldname} = forms.NullBooleanField(${2:})
$0
endsnippet

snippet fchar "forms.CharField" b
${1:fieldname} = forms.CharField()
$0
endsnippet

snippet fchoice "forms.ChoiceField" b
${1:fieldname} = forms.ChoiceField(choices=${2:})
$0
endsnippet

snippet ftypedchoice "forms.TypedChoiceField" b
${1:fieldname} = forms.ChoiceField(coerce=${2:function}, empty=${3:None})
$0
endsnippet

snippet fdate "forms.DateField" b
${1:fieldname} = forms.DateField()
$0
endsnippet

snippet fdt "forms.DateTimeField" b
${1:fieldname} = forms.DateTimeField()
$0
endsnippet

snippet ftime "forms.TimeField" b
${1:fieldname} = forms.TimeField()
$0
endsnippet

snippet fdec "forms.DecimalField" b
${1:fieldname} = forms.DecimalField()
$0
endsnippet

snippet femail "forms.EmailField" b
${1:fieldname} = forms.EmailField()
$0
endsnippet

snippet fff "forms.FileField" b
${1:fieldname} = forms.FileField()
$0
endsnippet

snippet ffpf "forms.FilePathField" b
${1:fieldname} = forms.FilePathField(path="${2:path/to/valid/dir}")
$0
endsnippet

snippet fif "forms.ImageField" b
${1:fieldname} = forms.ImageField()
$0
endsnippet

snippet fint "forms.IntegerField" b
${1:fieldname} = forms.IntegerField()
$0
endsnippet

snippet fip "forms.IPAddressField" b
${1:fieldname} = forms.IPAddressField()
$0
endsnippet

snippet fregex "forms.RegexField" b
${1:fieldname} = forms.RegexField(regex=${2:compiled_re_or_rawstring})
$0
endsnippet

snippet furl "forms.URLField" b
${1:fieldname} = forms.URLField(verify_exists=${2:False})
$0
endsnippet

# -------
# Views:
# -------


# Snippet formview def <{"form view"}>(request, *args, **kwargs):<CR>if request.method == 'POST':<CR>form = <{form}>(request.POST)<CR><{}>if form.is_valid():<CR><{instructions}><CR>return HttpResponseRedirect(reverse("<{"url name"}>"))<CR><CR>else:<CR>form = <{form}>()<CR><CR>data = { 'form': form, <{}>}<CR><CR>return render_to_response("<{"path to template"}>.html",data,<CR>context_instance=RequestContext(request))<CR><CR><{}>

snippet djview
def ${1:view_name}(request, ${2}*args, **kwargs):
    data = {$3}
    return render_to_response("${4:path_to_template}.html", data,
                            context_instance=RequestContext(request))
${5:}
endsnippet

snippet formview
def ${1:form_view}(request, *args, **kwargs):
    if request.method == 'POST':
        form = ${2:FormClass}(${3:}request.POST)
        if form.is_valid():
            ${4:# Do Stuff}
            return HttpResponseRedirect(reverse("${5:url name}"))
    else:
        form = $2($3)
    
    data = {'form': form, ${6:}}
    
    return render_to_response("${7:path_to_template}.html", data,
                            context_instance=RequestContext(request))
${8}
endsnippet

snippet rr
return render_to_response("${1:path_to_template}.html", ${2:data},
                        context_instance=RequestContext(request))
$0
endsnippet


snippet djemail
from django.core.mail import send_mail
from django.template import Context, loader

template = loader.get_template('${1:email_template_path}')
data = {
    ${2},
}
send_mail(
    ${3:email subject} % $4, 
    template.render(Context(data)), 
    ${5:email from}, 
    [${6:email recipients}],
    fail_silently=True
)
${7}
endsnippet
#         c = RequestContext(self._create_HttpRequest(r.request))
#         c['user'] = user # simulate auth context processor
#         c['first_name'] = self.avatar_inputs['first_name']
#         c['last_name'] = self.avatar_inputs['last_name']
#         c['password'] =  password,
#         self.assertEqual(template.render(c), avatar_email.body)

 

# -------
# Urls:
# -------
snippet url "Full"
url(r'${1:regex}', '${2:view_function}', name='${3:name_for_view}'),
${4}
endsnippet

snippet url "Full with Context"
url(r'${1:regex}', '${2:view_function}', {${3:extra_context},}, name='${4:name_for_view}'),
${5}
endsnippet

snippet url "Barebones"
(r'${1:regex}', '${2:view_function}',),
${3:}
endsnippet

snippet url "Include"
(r"${1:url_prefix}", include('${2:path.to.urlconf}')),
${3:}
endsnippet


snippet urlp "Set"
from django.conf.urls.defaults import *
urlpatterns = patterns('${1:django.views.generic}',
    ${2}
)
${3}
endsnippet

snippet urlp "Extend"
urlpatterns += patterns('${1:django.views.generic}',
    ${2}
)
${3}
endsnippet



# -------
# DjangoTest:
# -------
snippet djemailtest
self.assertEqual(0, len(mail.outbox))

# Run action here

${1:relevant_email} = None
data = {
    ${2}
}
expected_subject = ${3:expected_subject} % (
    ${4}
)

for email in mail.outbox:
    if email.subject == expected_subject:
        $1 = email
        break
self.assert_($1)
template = loader.get_template('${5:email_template}')
self.assertEqual(template.render(Context(data)),
        $1.body)
self.assertEqual(${6:expected_sender}, $1.from_email)
self.assertEqual(${7:expected_recipients},
         $1.recipients())

expected_email_context = (
    ${8}
)
for c in expected_email_context:
    self.assertTrue(c in $1.body)
${9}
endsnippet

snippet clilogin
self.assertTrue(self.client.login(username=${1:username}, password='${2:password}'))
${3}
endsnippet

snippet clipost
${4:response} = self.client.post(reverse('${1:urlname}'${2:, args=(,), kwargs={}}), data=${3:data})
${5}
endsnippet

snippet cliget
${4:response} = self.client.get(reverse('${1:urlname}'${2:, args=(,), kwargs={}}), data=${3:data})
${5}
endsnippet

# -------
# Template Tags:
# -------
snippet tag Inclusion
from django import template
register = template.Library()

@register.inclusion_tag('${4:path_to_template}', takes_context=${5:True})
def ${1:tag_name}(context, $2):
    $3
${6}
endsnippet
