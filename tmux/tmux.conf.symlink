# unbind -a
# source-file ~/.tmux.conf.defaults
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

set -g prefix `
bind ` send-prefix
# set -g prefix2 C-b

# set -g utf8
# setw -g utf8 on

# Tell tmux to use 256 colors:
set -g default-terminal "screen-256color"

# Permit distinctions between Ctrl+Key and, say, Shift+Ctrl+Key
set -gw xterm-keys on

# Lets have windows and panes start from 1:
set -g base-index 1
set -g pane-base-index 1

# Shorten delay when sending commands (can interfere with vim):
set -s escape-time 1

bind * list-clients
bind A command-prompt "rename-window %%"
bind a last-window
bind w choose-window
bind \\ confirm-before kill-server
bind ^L refresh-client
bind S command-prompt -p ssh: "new-window -n %1 'ssh %1'"
bind z resize-pane -Z \; display-message "Zoom toggled..."
bind u capture-pane \; save-buffer /tmp/tmux-buffer \; new-window -n "urlview" '$SHELL -c "urlview < /tmp/tmux-buffer"'

# unbind Tab
# bind Tab select-pane -t:.+
# unbind BTab
# bind BTab select-pane -t:.-

# Better split-keys:
bind | split-window -h
bind v split-window -h
bind - split-window -v

# History
set -g history-limit 10000

# Terminal emulator window title
set -g set-titles on
set -g set-titles-string '#S:#I.#P #W'

# Clock
setw -g clock-mode-colour green
setw -g clock-mode-style 24

# " windowlist -b
unbind '"'
bind '"' choose-window

setw -g mode-keys vi
set -g status-keys vi

# Pane Manipulation:
bind -r H resize-pane -L 1
bind -r J resize-pane -D 1
bind -r K resize-pane -U 1
bind -r L resize-pane -R 1

bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R

# Mouse Mode:
# set -g mouse-utf8 on
set -g -q mouse on
# setw -g mode-mouse on
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M

# Panes:
set -g pane-border-style fg=colour240
set -g pane-active-border-style fg=colour229

# Informational messages:
set -g message-style fg=colour208,bg=colour234

# ----------------------------------------------------------------------------
# Status Bar: {{{
# -----------
set -g status on              # turn the status bar on
# set -g status-utf8 on         # set utf-8 for the status bar
set -g status-interval 5      # set update frequency (default 15s)
# set -g status-position top  # position the status bar at top of screen

# visual notification of activity in other windows
setw -g monitor-activity on
set -g visual-activity on

# set color for status bar
set -g status-style bg=colour234,fg=yellow,dim

setw -g window-status-style fg=brightblue,bg=default,dim

setw -g window-status-bell-style fg=colour208,bg=default,blink

setw -g window-status-activity-style fg=colour208,bg=default,blink

setw -g window-status-format ' #I: #W#[fg=yellow] '
setw -g window-status-current-format ' #I: #W#[fg=yellow] '
setw -g window-status-current-style fg=colour208,bg=colour233,bright

set -g status-left-length 70  # maximum length
set -g status-right-length 60  # maximum length
set -g status-left "#[fg=green] [#S]"
set -g status-right "#[fg=yellow]%d %b %Y #[fg=green]::%l:%M %p  "
# }}}
# ----------------------------------------------------------------------------

# Pretend our terminal doesn't support alternative screens, and thus all text
# should be placed into the scrollback buffer when it goes off the top of the
# screen.
#
# http://superuser.com/questions/310251/use-terminal-scrollbar-with-tmux
set-option -g terminal-overrides 'xterm*:smcup@:rmcup@'

# Smart pane switching with awareness of vim splits
# bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-l) || tmux select-pane -R"
# bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys 'C-\\') || tmux select-pane -l"

setw -g aggressive-resize on

if-shell 'test "$(uname)" = "Darwin"' 'source ~/.tmux.conf.osx'
if-shell 'test "$(uname)" = "Linux"' 'source ~/.tmux.conf.linux'

# ----------------------------------------------------------------------------
# Note: all of the commented-out "if-shell" tests below cause tmux to behave
# very strangely - it basically fails to launch and completely messes up the
# prompt. I'm not sure why, but at least there's a test that reliably works.
# ----------------------------------------------------------------------------
# if-shell 'test "$(uname)" = "CYGWIN_NT-6.1"' 'source ~/.tmux.conf.cygwin'
# if-shell 'test "$(uname)" = "CYGWIN_NT-6.1"' 'source-file .tmux.conf.cygwin'
# if-shell 'test "${OS}" = "Windows_NT"' 'source ~/.tmux.conf.cygwin'
# if-shell '[ "$(uname)" = "CYGWIN_NT-6.1" ]' 'source ~/.tmux.conf.cygwin'

# These work:
# if-shell "uname | grep -q CYGWIN" "source ~/.tmux.conf.cygwin"

# This throws an error when invoked on zsh on osx:
# if-shell "[[ $(uname -o) == Cygwin ]]" "source ~/.tmux.conf.cygwin"
